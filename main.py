#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram
–ü–æ—Å—Ç–∏—Ç 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å: 9:00, 12:00, 18:00 –ø–æ –ú–°–ö
–ì–æ—Ç–æ–≤ –¥–ª—è Railway deployment
"""

import asyncio
import json
import logging
import os
from datetime import datetime
from typing import List, Dict, Optional

import aiohttp
import feedparser
import google.generativeai as genai
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]  # Railway —á–∏—Ç–∞–µ—Ç stdout
)
logger = logging.getLogger(__name__)

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    # –¢–æ–∫–µ–Ω—ã (–∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN')
    TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID', '@your_channel')
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', 'YOUR_GEMINI_KEY')
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    HN_SOURCES = [
        'https://hnrss.org/frontpage?points=100',  # –ü–æ—Å—Ç—ã —Å 100+ –æ—á–∫–æ–≤
        'https://hnrss.org/best?points=200',       # –õ—É—á—à–∏–µ —Å 200+ –æ—á–∫–æ–≤
        'https://hnrss.org/newest?points=150'      # –ù–æ–≤—ã–µ —Å 150+ –æ—á–∫–æ–≤
    ]
    
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–∞ (–ú–°–ö)
    POST_TIMES = ['09:00', '12:00', '18:00']
    TIMEZONE = 'Europe/Moscow'

class HackerNewsParser:
    """–ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å Hacker News"""
    
    def __init__(self, session: aiohttp.ClientSession):
        self.session = session
    
    async def fetch_news(self, url: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS"""
        try:
            async with self.session.get(url) as response:
                content = await response.text()
                
            feed = feedparser.parse(content)
            news = []
            
            for entry in feed.entries[:10]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-10
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–ª—ã –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                points = 0
                if hasattr(entry, 'comments') and 'points' in entry.comments:
                    try:
                        points = int(entry.comments.split()[0])
                    except:
                        points = 0
                
                news_item = {
                    'title': entry.title,
                    'link': entry.link,
                    'published': entry.published,
                    'points': points,
                    'summary': getattr(entry, 'summary', '')[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                }
                news.append(news_item)
            
            return sorted(news, key=lambda x: x['points'], reverse=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å {url}: {e}")
            return []
    
    async def get_top_stories(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        all_news = []
        
        for source in Config.HN_SOURCES:
            news = await self.fetch_news(source)
            all_news.extend(news)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å—Å—ã–ª–∫–∞–º
        seen_links = set()
        unique_news = []
        for item in all_news:
            if item['link'] not in seen_links:
                seen_links.add(item['link'])
                unique_news.append(item)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª–∞–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3
        return sorted(unique_news, key=lambda x: x['points'], reverse=True)[:3]

class GeminiTranslator:
    """–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini API"""
    
    def __init__(self):
        genai.configure(api_key=Config.GEMINI_API_KEY)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
    
    async def translate_to_russian(self, text: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        try:
            prompt = f"""
            –ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
            –°–æ—Ö—Ä–∞–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–æ —Å–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
            –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥:
            
            {text}
            """
            
            response = await asyncio.to_thread(
                self.model.generate_content, prompt
            )
            
            return response.text.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ

class TelegramPoster:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, session: aiohttp.ClientSession):
        self.session = session
        self.base_url = f"https://api.telegram.org/bot{Config.TELEGRAM_BOT_TOKEN}"
    
    async def send_message(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': Config.TELEGRAM_CHANNEL_ID,
                'text': text,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            async with self.session.post(url, json=data) as response:
                if response.status == 200:
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def format_news_post(self, news_items: List[Dict], translated: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
        current_time = datetime.now().strftime("%H:%M")
        
        post = f"üî• <b>–¢–æ–ø —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π {current_time} –ú–°–ö</b>\n\n"
        
        for i, (item, translation) in enumerate(zip(news_items, translated), 1):
            post += f"<b>{i}. {translation}</b>\n"
            post += f"üí¨ {item['points']} –æ—á–∫–æ–≤\n"
            post += f"üîó <a href='{item['link']}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>\n\n"
        
        post += "üì° <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –æ—Ç TechNewsBot</i>"
        return post

class TechNewsBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.session = None
        self.parser = None
        self.translator = GeminiTranslator()
        self.poster = None
        self.scheduler = AsyncIOScheduler(timezone=Config.TIMEZONE)
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        self.parser = HackerNewsParser(self.session)
        self.poster = TelegramPoster(self.session)
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def process_and_post_news(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_items = await self.parser.get_top_stories()
            
            if not news_items:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
                return
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            # 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            translated_titles = []
            for item in news_items:
                translated = await self.translator.translate_to_russian(item['title'])
                translated_titles.append(translated)
            
            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
            post_text = self.poster.format_news_post(news_items, translated_titles)
            success = await self.poster.send_message(post_text)
            
            if success:
                logger.info("–ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!")
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_and_post_news: {e}")
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∏–Ω–≥–∞"""
        for time_str in Config.POST_TIMES:
            hour, minute = map(int, time_str.split(':'))
            
            self.scheduler.add_job(
                self.process_and_post_news,
                trigger=CronTrigger(hour=hour, minute=minute),
                id=f'post_news_{time_str}',
                name=f'Post news at {time_str}'
            )
            
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞ {time_str} –ú–°–ö")
    
    async def run_once(self):
        """–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        await self.process_and_post_news()
    
    async def run_forever(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞"""
        self.setup_scheduler()
        self.scheduler.start()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        
        try:
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
            while True:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            self.scheduler.shutdown()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤ production —Ä–µ–∂–∏–º–µ
    async with TechNewsBot() as bot:
        await bot.run_forever()

if __name__ == "__main__":
    # Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHANNEL_ID', 'GEMINI_API_KEY']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        logger.error("–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ Railway Dashboard -> Variables")
        exit(1)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Tech News Bot –Ω–∞ Railway...")
    asyncio.run(main())