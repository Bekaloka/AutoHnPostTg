#!/usr/bin/env python3
import asyncio
import logging
import os
from datetime import datetime
from typing import Dict, Optional

import aiohttp
import feedparser
import trafilatura
import google.generativeai as genai
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN')
    TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID', '@your_channel')
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', 'YOUR_GEMINI_KEY')
    HN_SOURCE = 'https://hnrss.org/frontpage?points=100'
    POST_TIMES = ['09:00', '12:00', '18:00']
    TIMEZONE = 'Europe/Moscow'

class HackerNewsBot:
    def __init__(self, session: aiohttp.ClientSession):
        self.session = session
        genai.configure(api_key=Config.GEMINI_API_KEY)
        self.model = genai.GenerativeModel('gemini-2.5-flash')

    async def get_top_story(self) -> Optional[Dict]:
        """–ë–µ—Ä—ë—Ç —Ç–æ–ø-1 –Ω–æ–≤–æ—Å—Ç—å —Å Hacker News"""
        try:
            async with self.session.get(Config.HN_SOURCE) as resp:
                feed = feedparser.parse(await resp.text())

            if not feed.entries:
                return None

            entry = feed.entries[0]
            return {
                "title": entry.title,
                "link": entry.link
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            return None

    async def fetch_article_text(self, url: str) -> str:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏"""
        try:
            async with self.session.get(url) as resp:
                html = await resp.text()
            text = trafilatura.extract(html)
            return text or "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç."

    async def translate_text(self, text: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini"""
        try:
            prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π, —Å–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:\n\n{text}"
            response = await asyncio.to_thread(self.model.generate_content, prompt)
            return response.text.strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return text

    async def send_to_telegram(self, title: str, translated_text: str, link: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ Telegram"""
        post = f"üî• <b>{title}</b>\n\n‚úçÔ∏è {translated_text}\n\nüîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª</a>"
        try:
            async with self.session.post(
                f"https://api.telegram.org/bot{Config.TELEGRAM_BOT_TOKEN}/sendMessage",
                json={
                    "chat_id": Config.TELEGRAM_CHANNEL_ID,
                    "text": post,
                    "parse_mode": "HTML",
                    "disable_web_page_preview": False
                }
            ) as resp:
                if resp.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {resp.status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")

    async def process_and_post(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞"""
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏...")
        story = await self.get_top_story()
        if not story:
            logger.warning("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return

        logger.info(f"–ù–æ–≤–æ—Å—Ç—å: {story['title']}")
        article_text = await self.fetch_article_text(story["link"])
        translated_title = await self.translate_text(story["title"])
        translated_article = await self.translate_text(article_text)
        await self.send_to_telegram(translated_title, translated_article, story["link"])

async def main():
    async with aiohttp.ClientSession() as session:
        bot = HackerNewsBot(session)
        scheduler = AsyncIOScheduler(timezone=Config.TIMEZONE)

        # –ü–æ—Å—Ç —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await bot.process_and_post()

        # –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        for t in Config.POST_TIMES:
            h, m = map(int, t.split(':'))
            scheduler.add_job(bot.process_and_post, CronTrigger(hour=h, minute=m))
        scheduler.start()

        while True:
            await asyncio.sleep(60)

if __name__ == "__main__":
    asyncio.run(main())
