import aiohttp
import asyncio
import json
import os
import feedparser
import trafilatura
import google.generativeai as genai
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Bot

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
POSTED_FILE = "posted.json"

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-pro")
bot = Bot(token=TELEGRAM_TOKEN)

# === –§—É–Ω–∫—Ü–∏–∏ ===

def load_posted():
    if os.path.exists(POSTED_FILE):
        with open(POSTED_FILE, "r") as f:
            return json.load(f)
    return []

def save_posted(posted):
    with open(POSTED_FILE, "w") as f:
        json.dump(posted, f)

async def fetch_hn_top():
    url = "https://hnrss.org/frontpage"
    feed = feedparser.parse(url)
    return feed.entries

async def get_full_text(url):
    downloaded = trafilatura.fetch_url(url)
    if downloaded:
        return trafilatura.extract(downloaded)
    return None

async def translate_text(text):
    prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å–º—ã—Å–ª –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ:
- –£–¥–∞–ª–∏ –ª—é–±—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–µ—Ç–∫–∞–º–∏ –≤–∏–¥–∞ "(–û—Ü–µ–Ω–∫–∞:...)" –∏–ª–∏ "Re:".
- –£–¥–∞–ª–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∞–±–∑–∞—Ü—ã.
- –ò–≥–Ω–æ—Ä–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Å—Ç–∞—Ç—å–∏.
- –û—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–Ω—ã–π, —á–∏—Å—Ç—ã–π –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.

–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:

{text}"""
    resp = model.generate_content(prompt)
    return resp.text.strip()

async def post_news():
    posted = load_posted()
    entries = await fetch_hn_top()

    for entry in entries:
        if entry.link in posted:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–æ—Å—Ç–Ω—É—Ç—ã–µ
        full_text = await get_full_text(entry.link)
        if not full_text:
            continue
        translated = await translate_text(full_text)
        message = f"üî• *{entry.title}*\n\n{translated}\n\nüîó {entry.link}"
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode="Markdown")
        posted.append(entry.link)
        save_posted(posted)
        break  # –ø—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å –∑–∞ –∑–∞–ø—É—Å–∫

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
async def main():
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(post_news, "cron", hour=9, minute=0)
    scheduler.add_job(post_news, "cron", hour=12, minute=0)
    scheduler.add_job(post_news, "cron", hour=18, minute=0)
    scheduler.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞...")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
