#!/usr/bin/env python3
"""
üî• TechNewsBot ‚Äî –ø–æ—Å—Ç–∏—Ç —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏ Hacker News –≤ Telegram
- –ò—Å—Ç–æ—á–Ω–∏–∫: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API Hacker News
- –ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Gemini API
- 3 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å: 09:00, 12:00, 18:00 –ú–°–ö
- –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ä–∞–∑—É –ø–æ—Å—Ç–∏—Ç —Ç–æ–ø-1 –Ω–æ–≤–æ—Å—Ç—å
"""

import asyncio
import logging
import os
from datetime import datetime
from typing import List, Dict

import aiohttp
import google.generativeai as genai
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# ======= CONFIG =======
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

    HN_TOP_URL = "https://hacker-news.firebaseio.com/v0/topstories.json"
    HN_ITEM_URL = "https://hacker-news.firebaseio.com/v0/item/{}.json"

    POST_TIMES = ['09:00', '12:00', '18:00']
    TIMEZONE = 'Europe/Moscow'


# ======= LOGGING =======
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


# ======= HN PARSER =======
class HackerNewsAPI:
    def __init__(self, session: aiohttp.ClientSession):
        self.session = session

    async def get_top_stories_ids(self) -> List[int]:
        async with self.session.get(Config.HN_TOP_URL) as resp:
            ids = await resp.json()
        return ids[:20]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    async def get_item(self, item_id: int) -> Dict:
        async with self.session.get(Config.HN_ITEM_URL.format(item_id)) as resp:
            return await resp.json()

    async def get_top_stories(self, limit=3) -> List[Dict]:
        ids = await self.get_top_stories_ids()
        items = await asyncio.gather(*(self.get_item(i) for i in ids))
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—å–∏
        stories = [it for it in items if it and it.get("type") == "story" and "url" in it]
        return stories[:limit]


# ======= GEMINI TRANSLATOR =======
class GeminiTranslator:
    def __init__(self):
        genai.configure(api_key=Config.GEMINI_API_KEY)
        self.model = genai.GenerativeModel('gemini-2.5-flash')

    async def translate(self, text: str) -> str:
        try:
            prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, —Å–æ—Ö—Ä–∞–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã:\n\n{text}"
            resp = await asyncio.to_thread(self.model.generate_content, prompt)
            return resp.text.strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return text


# ======= TELEGRAM POSTER =======
class TelegramPoster:
    def __init__(self, session: aiohttp.ClientSession):
        self.session = session
        self.base_url = f"https://api.telegram.org/bot{Config.TELEGRAM_BOT_TOKEN}"

    async def send_message(self, text: str) -> bool:
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": Config.TELEGRAM_CHANNEL_ID,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": False
        }
        async with self.session.post(url, json=data) as resp:
            if resp.status == 200:
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            logger.error(f"–û—à–∏–±–∫–∞ TG API: {resp.status}")
            return False


# ======= MAIN BOT =======
class TechNewsBot:
    def __init__(self):
        self.session = None
        self.hn = None
        self.translator = None
        self.poster = None
        self.scheduler = AsyncIOScheduler(timezone=Config.TIMEZONE)

    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        self.hn = HackerNewsAPI(self.session)
        self.translator = GeminiTranslator()
        self.poster = TelegramPoster(self.session)
        return self

    async def __aexit__(self, exc_type, exc, tb):
        if self.session:
            await self.session.close()

    async def make_post(self, limit=3):
        logger.info("üì° –ü–æ–ª—É—á–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")
        stories = await self.hn.get_top_stories(limit=limit)

        if not stories:
            logger.warning("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
            return

        translated = []
        for st in stories:
            tr_title = await self.translator.translate(st['title'])
            translated.append((tr_title, st['url']))

        now = datetime.now().strftime("%H:%M")
        text = f"üî• <b>–¢–æ–ø Hacker News {now} –ú–°–ö</b>\n\n"
        for i, (title, link) in enumerate(translated, 1):
            text += f"<b>{i}. {title}</b>\nüîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å</a>\n\n"

        await self.poster.send_message(text)

    async def post_startup_news(self):
        logger.info("üöÄ –ü–æ—Å—Ç–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å...")
        await self.make_post(limit=1)

    def schedule_jobs(self):
        for t in Config.POST_TIMES:
            h, m = map(int, t.split(":"))
            self.scheduler.add_job(self.make_post, CronTrigger(hour=h, minute=m))

    async def run(self):
        await self.post_startup_news()
        self.schedule_jobs()
        self.scheduler.start()
        while True:
            await asyncio.sleep(60)


async def main():
    if not all([Config.TELEGRAM_BOT_TOKEN, Config.TELEGRAM_CHANNEL_ID, Config.GEMINI_API_KEY]):
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)
    async with TechNewsBot() as bot:
        await bot.run()


if __name__ == "__main__":
    asyncio.run(main())ranslator.translate_to_russian(top_news['title'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–æ—Å—Ç
            startup_post = f"üî• <b>–¢–æ–ø –Ω–æ–≤–æ—Å—Ç—å HackerNews:</b>\n\n"
            startup_post += f"<b>{translated_title}</b>\n"
            startup_post += f"üí¨ {top_news['points']} –æ—á–∫–æ–≤\n"
            startup_post += f"üîó <a href='{top_news['link']}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            success = await self.poster.send_message(startup_post)
            
            if success:
                logger.info("üéâ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ post_startup_news: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤ production —Ä–µ–∂–∏–º–µ
    async with TechNewsBot() as bot:
        await bot.run_forever()

if __name__ == "__main__":
    # Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHANNEL_ID', 'GEMINI_API_KEY']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        logger.error("–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ Railway Dashboard -> Variables")
        exit(1)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Tech News Bot –Ω–∞ Railway...")
    asyncio.run(main())
